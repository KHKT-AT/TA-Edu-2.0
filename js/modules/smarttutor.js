// js/modules/smarttutor.js  ‚Äî b·∫£n ƒë√£ s·ª≠a cho Live Server + Emulator
// - Kh√¥ng l·ªô API key: client ch·ªâ g·ªçi endpoint server.
// - T·ª± nh·∫≠n ID ph·∫ßn t·ª≠ cho c·∫£ smarttutor.html v√† widget dashboard.
// - ∆Øu ti√™n URL backend t·ª´ window.TA_EDU_TUTOR_BACKEND; fallback /api/smarttutor.

import { auth } from "../core/firebase.js";
import { onAuthStateChanged } from "https://www.gstatic.com/firebasejs/12.4.0/firebase-auth.js";

// ====== Ph·∫ßn t·ª≠ UI (h·ªó tr·ª£ 2 layout) ======
const chatBox =
  document.getElementById("chat-box") ||
  document.getElementById("tutorMessages");

const input =
  document.getElementById("user-input") ||
  document.getElementById("tutorInput");

const sendBtn =
  document.getElementById("send-btn") ||
  document.getElementById("tutorSend");

const form = document.getElementById("tutorForm"); // c√≥ ·ªü widget

// X√°c ƒë·ªãnh class cho tin nh·∫Øn theo layout
const CLASS_USER = chatBox?.id === "tutorMessages" ? "tutor-user" : "user-msg";
const CLASS_BOT  = chatBox?.id === "tutorMessages" ? "tutor-bot"  : "bot-msg";

// ====== URL backend (emulator ho·∫∑c hosting rewrite) ======
const BACKEND_URL =
  (typeof window !== "undefined" && window.TA_EDU_TUTOR_BACKEND) ||
  "/api/smarttutor";

// ====== B·∫£o v·ªá ƒëƒÉng nh·∫≠p ======
onAuthStateChanged(auth, (user) => {
  if (!user) {
    // D√πng ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi ƒë·ªÉ kh√¥ng l·ªói subpath
    window.location.href = "index.html";
  } else {
    appendMessage("bot", `Xin ch√†o ${user.displayName || "b·∫°n"} üëã! M√¨nh l√† SmartTutor, h·ªèi m√¨nh b·∫•t k·ª≥ ƒëi·ªÅu g√¨ nh√©.`);
  }
});

// ====== G·ª≠i tin ======
if (form) {
  // N·∫øu l√† widget c√≥ <form> th√¨ submit ƒë·ªÉ ch·∫∑n reload
  form.addEventListener("submit", (e) => {
    e.preventDefault();
    sendMessage();
  });
} else if (sendBtn) {
  sendBtn.addEventListener("click", sendMessage);
}

if (input) {
  input.addEventListener("keydown", (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });
}

async function sendMessage() {
  const text = (input?.value || "").trim();
  if (!text || !chatBox) return;

  appendMessage("user", text);
  if (input) input.value = "";
  appendMessage("bot", "‚è≥ ƒêang suy nghƒ©...");

  try {
    const reply = await askAI(text);
    chatBox.lastElementChild?.remove(); // b·ªè d√≤ng "ƒêang suy nghƒ©‚Ä¶"
    appendMessage("bot", reply);
  } catch (e) {
    chatBox.lastElementChild?.remove();
    appendMessage("bot", "‚ö†Ô∏è L·ªói k·∫øt n·ªëi. Th·ª≠ l·∫°i sau nh√©!");
    console.error(e);
  }
}

async function askAI(latestUserText) {
  // Thu th·∫≠p v√†i tin g·∫ßn nh·∫•t cho ng·ªØ c·∫£nh (h·ªó tr·ª£ 2 b·ªô class)
  const nodes = [...chatBox.querySelectorAll(`.${CLASS_USER}, .${CLASS_BOT}, .user-msg, .bot-msg`)];
  const history = nodes.slice(-8).map(el => ({
    role: el.classList.contains(CLASS_USER) || el.classList.contains("user-msg") ? "user" : "assistant",
    content: el.textContent.trim()
  }));
  history.push({ role: "user", content: latestUserText });

  const res = await fetch(BACKEND_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ messages: history })
  });

  if (!res.ok) {
    const t = await res.text();
    throw new Error(`Server error ${res.status}: ${t}`);
  }
  const data = await res.json();
  return data.reply?.trim() || "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi n√†y.";
}

function appendMessage(sender, msg) {
  if (!chatBox) return;
  const div = document.createElement("div");
  div.className = sender === "user" ? CLASS_USER : CLASS_BOT;
  div.textContent = msg;
  chatBox.appendChild(div);
  chatBox.scrollTop = chatBox.scrollHeight;

  // T·ª± n·ªü textarea n·∫øu l√† widget
  if (input && input.tagName === "TEXTAREA") {
    input.style.height = "auto";
    input.style.height = Math.min(input.scrollHeight, 160) + "px";
  }
}
